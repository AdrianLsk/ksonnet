package cluster

import (
	"github.com/ksonnet/ksonnet/pkg/metadata"
	"github.com/pkg/errors"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

type annotationEncoder interface {
	EncodePristine(map[string]interface{}) error
	Marshal() ([]byte, error)
}

// tagger tags an object with ksonnet metadata. Currently, the
// metadata includes a label and an annotation with the object's
// state as generated by ksonnet.
type tagger interface {
	Tag(*unstructured.Unstructured) error
}

// defaultTagger is the default implementation of managed.
type defaultTagger struct {
	annotationEncoder annotationEncoder
}

var _ tagger = (*defaultTagger)(nil)

func newDefaultManaged() *defaultTagger {
	return &defaultTagger{
		annotationEncoder: &managedAnnotation{},
	}
}

func (m *defaultTagger) Tag(obj *unstructured.Unstructured) error {
	if obj == nil {
		return errors.New("object is nil")
	}

	if m.annotationEncoder == nil {
		return errors.New("encoder is nil")
	}

	if err := m.annotationEncoder.EncodePristine(obj.Object); err != nil {
		return err
	}

	mmEncoded, err := m.annotationEncoder.Marshal()
	if err != nil {
		return err
	}

	SetMetaDataLabel(obj, metadata.LabelDeployManager, appKsonnet)
	SetMetaDataAnnotation(obj, metadata.AnnotationManaged, string(mmEncoded))

	return nil
}
